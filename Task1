package com.example.sravankumar.myapplication;

import android.content.Context;
import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getTargetContext();

        assertEquals("com.example.sravankumar.myapplication", appContext.getPackageName());
    }
}
public class Confirm extends AppCompatActivity implements View.OnClickListener {

    String train_name, class_type, no_of_tickets, name, age, mob_number, final_price, berth_type, price,train_number, str_avail, answer, date;
    TextView train_value, class_value, tickets_value, name_value, age_value,mobile_value, final_value, berth_value;
    Button confirm;
    boolean net = false;
    static int id = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_confirm);

        Bundle extras = getIntent().getExtras();
        assert extras != null;

        no_of_tickets = extras.getString("No. of tickets");
        name = extras.getString("Name");
        age = extras.getString("Age");
        mob_number = extras.getString("Mobile Number");
        berth_type = extras.getString("Berth Type");

        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        price = sharedPreferences.getString("price", null);
        str_avail= sharedPreferences.getString("Avail", null);
        train_name= sharedPreferences.getString("train", null);
        class_type = sharedPreferences.getString("type", null);
        train_number = sharedPreferences.getString("Train_no", null);
        SharedPreferences sharedPreferences1 = PreferenceManager.getDefaultSharedPreferences(this);
        date = sharedPreferences1.getString("Date", null);

        train_value = findViewById(R.id.train_value);
        class_value = findViewById(R.id.class_value);
        tickets_value = findViewById(R.id.ticket_count);
        name_value = findViewById(R.id.name_value);
        age_value = findViewById(R.id.age_value);
        mobile_value = findViewById(R.id.mob_value);
        final_value = findViewById(R.id.price_value);
        berth_value = findViewById(R.id.berth_value);

        int temp = Integer.valueOf(price)*Integer.valueOf(no_of_tickets);
        final_price = String.valueOf(temp);

        train_value.setText(train_name);
        class_value.setText(class_type);
        tickets_value.setText(no_of_tickets);
        name_value.setText(name);
        age_value.setText(age);
        mobile_value.setText(mob_number);
        final_value.setText(final_price);
        berth_value.setText(berth_type);

        confirm = findViewById(R.id.confirm);
        confirm.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {

        if(v == confirm)
        {
            ConnectivityManager cm = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
            if (null != activeNetwork) {
                if(activeNetwork.getType() == ConnectivityManager.TYPE_WIFI)
                {
                    answer="You are connected to a WiFi Network";
                    net  = true;
                }

                if(activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE)
                {
                    net  = true;
                    answer="You are connected to a Mobile Network";
                }

            }
            else
                answer = "No internet Connectivity";

            if(net) {
                String type = "confirm";
                String up = String.valueOf(Integer.valueOf(str_avail) - Integer.valueOf(no_of_tickets));
                Backgroundworker backgroundworker = new Backgroundworker(this);
                backgroundworker.execute(type, train_number, up);

                displayTicket(train_number, train_name, no_of_tickets, class_type, name, age, berth_type, mob_number, date);
            }
            else
                Toast.makeText(this, answer, Toast.LENGTH_SHORT).show();
        }

    }

    private void displayTicket(String train_number, String train_name, String no_of_tickets, String class_type,
                               String name, String age, String berth_type, String mob_number, String date)
    {
        Document doc = new Document();
        String x = "/Ticket_" + String.valueOf(id) + ".pdf";
        id = id+1;
        String outpath = Environment.getExternalStorageDirectory() + x;
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(outpath));
            doc.open();
            doc.addTitle("Ticket Details");
            doc.add(new Paragraph("Train No : " + train_number));
            doc.add(new Paragraph("Train Name : " +train_name));
            doc.add(new Paragraph("No. of Tickets : " + no_of_tickets));
            doc.add(new Paragraph("No. of Tickets : " + class_type));
            doc.add(new Paragraph("Passenger Name : " + name));
            doc.add(new Paragraph("Age : " + age));
            doc.add(new Paragraph("Berth Type : " + berth_type));
            doc.add(new Paragraph("Travel date : " + date));
            doc.add(new Paragraph("Mobile No. : " + mob_number));
            doc.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }

        //openPdf();
    }

    void openPdf()
    {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        String path = Environment.getExternalStorageDirectory().getAbsolutePath();

        File file = new File(path, "mypdf.pdf");

        intent.setDataAndType( Uri.fromFile(file), "application/pdf" );
        startActivity(intent);
    }

    @Override
    public void onBackPressed() {

        Intent intent = new Intent(Confirm.this, Search.class);
        startActivity(intent);

    }
}
public class Login extends AppCompatActivity implements View.OnClickListener {

    EditText username, pswd;
    Button login;
    String user_id, password, answer;
    boolean net = false;
    TextView new_user;
    AppCompatCheckBox checkbox;
    private static final int EXTERNAL_STORAGE_PERMISSION_CONSTANT = 100;
    private static final int REQUEST_PERMISSION_SETTING = 101;
    private boolean sentToSettings = false;
    private SharedPreferences permissionStatus;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.login);
        checkbox = findViewById(R.id.checkbox);

        username = findViewById(R.id.user_id);
        pswd = findViewById(R.id.pswd);

        login = findViewById(R.id.login);
        new_user = findViewById(R.id.new_user);

        permissionStatus = getSharedPreferences("permissionStatus", MODE_PRIVATE);
        requestpermissions();


        login.setOnClickListener(this);
        new_user.setOnClickListener(this);
        checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                if (isChecked) {
                    // show password
                    pswd.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
                } else {
                    // hide password
                    pswd.setTransformationMethod(PasswordTransformationMethod.getInstance());
                }
            }
        });

    }

    @Override
    public void onClick(View v) {

        if (v == login) {
            user_id = username.getText().toString();
            password = pswd.getText().toString();


            ConnectivityManager cm = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
            if (null != activeNetwork) {
                if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {
                    answer = "You are connected to a WiFi Network";
                    net = true;
                }

                if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {
                    net = true;
                    answer = "You are connected to a Mobile Network";
                }

            } else
                answer = "No internet Connectivity";

            if (net) {


                if ((isValidPassword(password.trim())) && isValidEmail(user_id.trim())) {

                    String type = "login";
                    Backgroundworker backgroundworker = new Backgroundworker(this);
                    backgroundworker.execute(type, user_id, password);
                }
                if(!isValidPassword(password.trim())) {
                    Toast.makeText(Login.this, "Invalid password 1", Toast.LENGTH_SHORT).show();
                }
                if(!isValidEmail(user_id.trim()))
                    Toast.makeText(Login.this, "Invalid user_id", Toast.LENGTH_SHORT).show();

            } else {
                Toast.makeText(Login.this, answer, Toast.LENGTH_SHORT).show();
            }


        }

        if (v == new_user) {
            startActivity(new Intent(this, Login.class));
        }
    }

    public boolean isValidPassword(final String password) {

        Pattern pattern;
        Matcher matcher;

        final String PASSWORD_PATTERN = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$";

        pattern = Pattern.compile(PASSWORD_PATTERN);
        matcher = pattern.matcher(password);

        return matcher.matches();

    }

    public boolean isValidEmail(final String password) {

        Pattern pattern;
        Matcher matcher;

        final String PASSWORD_PATTERN = "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$";


        pattern = Pattern.compile(PASSWORD_PATTERN);
        matcher = pattern.matcher(password);

        return matcher.matches();

    }

    private void requestpermissions() {
        if (ActivityCompat.checkSelfPermission(Login.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(Login.this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                //Show Information about why you need the permission
                AlertDialog.Builder builder = new AlertDialog.Builder(Login.this);
                builder.setTitle("Need Storage Permission");
                builder.setMessage("This app needs storage permission.");
                builder.setPositiveButton("Grant", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                        ActivityCompat.requestPermissions(Login.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, EXTERNAL_STORAGE_PERMISSION_CONSTANT);
                    }
                });
                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
                builder.show();
            } else if (permissionStatus.getBoolean(Manifest.permission.WRITE_EXTERNAL_STORAGE, false)) {
                //Previously Permission Request was cancelled with 'Dont Ask Again',
                // Redirect to Settings after showing Information about why you need the permission
                AlertDialog.Builder builder = new AlertDialog.Builder(Login.this);
                builder.setTitle("Need Storage Permission");
                builder.setMessage("This app needs storage permission.");
                builder.setPositiveButton("Grant", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                        sentToSettings = true;
                        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                        Uri uri = Uri.fromParts("package", getPackageName(), null);
                        intent.setData(uri);
                        startActivityForResult(intent, REQUEST_PERMISSION_SETTING);
                        Toast.makeText(getBaseContext(), "Go to Permissions to Grant Storage", Toast.LENGTH_LONG).show();
                    }
                });
                builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
                builder.show();
            } else {
                //just request the permission
                ActivityCompat.requestPermissions(Login.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, EXTERNAL_STORAGE_PERMISSION_CONSTANT);
            }

            SharedPreferences.Editor editor = permissionStatus.edit();
            editor.putBoolean(Manifest.permission.WRITE_EXTERNAL_STORAGE, true);
            editor.commit();


        } else {
            //You already have the permission, just go ahead.
            proceedAfterPermission();
        }
    }

    private void proceedAfterPermission() {
        //We've got the permission, now we can proceed further
        Toast.makeText(getBaseContext(), "We got the Storage Permission", Toast.LENGTH_LONG).show();
    }

}
